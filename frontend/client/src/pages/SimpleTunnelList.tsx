import React, { useState, useEffect } from 'react';
import { Link } from 'wouter';
import { FaEye, FaWater, FaSearch, FaPlus, FaEdit, FaSave, FaTimes } from 'react-icons/fa';
import PageWrapper from '../components/PageWrapper';
import { useAuth } from '../context/AuthContext';
import { useTunnels } from '../context/TunnelContext';

// Import shared Tunnel type if needed
// For now, define a local interface that matches the API return values
interface Tunnel {
  id: string;
  name: string;
  riskLevel: string; // 'High' | 'Moderate' | 'Low'
  waterLevel: number;
  barrierStatus: string; // 'Open' | 'Closed'
  lastUpdate: string; // ISO date string
  location?: string;
  length?: number;
  capacity?: number;
  description?: string;
  mapEmbedHtml?: string;
  guidanceDisplayEnabled?: boolean;
  activeGuidanceSymbol?: string;
}

const SimpleTunnelList: React.FC = () => {
  const { hasPermission } = useAuth();
  const { tunnels, addTunnel, updateTunnel, loading } = useTunnels();
  
  // State for search/pagination, and sorting
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(5);
  const [sortBy, setSortBy] = useState<'id' | 'name' | 'risk' | 'water' | 'update'>('id');

  // State for modal and form
  const [showModal, setShowModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState<Partial<Tunnel>>({
    name: '',
    riskLevel: 'Low' as const,
    waterLevel: 0,
    barrierStatus: 'Open' as const,
    location: '',
    length: 0,
    capacity: 0,
    description: '',
    mapEmbedHtml: ''
  });

  // Handle opening the modal for adding a new tunnel
  const handleAddNew = () => {
    setFormData({
      name: '',
      riskLevel: 'Low',
      waterLevel: 0,
      barrierStatus: 'Open',
      location: '',
      length: 0,
      capacity: 0,
      description: '',
      mapEmbedHtml: ''
    });
    setIsEditing(false);
    setShowModal(true);
  };

  // Handle opening the modal for editing a tunnel
  const handleEdit = (tunnel: Tunnel) => {
    setFormData({...tunnel});
    setIsEditing(true);
    setShowModal(true);
  };

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    // Handle numeric values
    if (type === 'number') {
      setFormData({...formData, [name]: parseInt(value) || 0});
    } else {
      setFormData({...formData, [name]: value});
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (isEditing && formData.id) {
        // Update existing tunnel using the API
        await updateTunnel(formData.id, formData);
      } else {
        // Add new tunnel using the API
        const newTunnel = {
          ...formData,
          // id will be generated by the API
          // lastUpdate will be set by the API
        };
        await addTunnel(newTunnel as Omit<Tunnel, 'id' | 'lastUpdate'>);
      }
      
      // Close modal and reset form
      setShowModal(false);
      setFormData({
        name: '',
        riskLevel: 'Low',
        waterLevel: 0,
        barrierStatus: 'Open',
        location: '',
        length: 0,
        capacity: 0,
        description: '',
        mapEmbedHtml: ''
      });
    } catch (error) {
      console.error('Error saving tunnel:', error);
      alert('There was an error saving the tunnel. Please try again.');
    }
  };

  // Filter tunnels based on search query and apply sorting
  const filteredTunnels = tunnels
    .filter(tunnel => 
      tunnel.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tunnel.riskLevel.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tunnel.id.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .sort((a, b) => {
      switch (sortBy) {
        case 'id':
          return a.id.localeCompare(b.id);
        case 'name':
          return a.name.localeCompare(b.name);
        case 'risk':
          // Sort by risk level: High -> Moderate -> Low
          const riskOrder: Record<string, number> = { 'High': 1, 'Moderate': 2, 'Low': 3 };
          return (riskOrder[a.riskLevel] || 4) - (riskOrder[b.riskLevel] || 4);
        case 'water':
          // Sort by water level (high to low)
          return b.waterLevel - a.waterLevel;
        case 'update':
          return new Date(b.lastUpdate).getTime() - new Date(a.lastUpdate).getTime();
        default:
          return 0;
      }
    });

  // Calculate pagination
  const totalPages = Math.ceil(filteredTunnels.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTunnels = filteredTunnels.slice(indexOfFirstItem, indexOfLastItem);

  // Get status badge class based on risk level
  const getRiskBadgeClass = (riskLevel: string) => {
    switch (riskLevel) {
      case 'High':
        return 'bg-danger';
      case 'Moderate':
        return 'bg-warning text-dark';
      case 'Low':
        return 'bg-success';
      default:
        return 'bg-secondary';
    }
  };

  // Get barrier status badge class
  const getBarrierBadgeClass = (status: string) => {
    return status === 'Open' ? 'bg-success' : 'bg-danger';
  };

  // Handle page change
  const handlePageChange = (pageNumber: number) => {
    if (pageNumber < 1 || pageNumber > totalPages) return;
    setCurrentPage(pageNumber);
  };

  return (
    <PageWrapper>
      <div className="container py-4">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h1 className="mb-0">Tunnel Management</h1>
          
          {hasPermission(['admin', 'ministry', 'traffic']) && (
            <button 
              onClick={handleAddNew} 
              className="btn btn-primary d-flex align-items-center"
            >
              <FaPlus className="me-2" />
              Add New Tunnel
            </button>
          )}
        </div>

        {/* Search and Sort Controls */}
        <div className="card mb-4">
          <div className="card-body">
            <div className="row align-items-center">
              <div className="col-lg-6 mb-3 mb-lg-0">
                <div className="position-relative">
                  <div className="position-absolute start-0 top-0 bottom-0 d-flex align-items-center ps-3">
                    <FaSearch className="text-muted" />
                  </div>
                  <input 
                    type="text" 
                    className="form-control ps-5" 
                    placeholder="Search tunnels by name or risk level..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
              </div>
              
              <div className="col-lg-6">
                <div className="d-flex align-items-center">
                  <label className="me-2 fw-semibold">Sort by:</label>
                  <select 
                    className="form-select" 
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value as 'id' | 'name' | 'risk' | 'water' | 'update')}
                  >
                    <option value="id">Tunnel ID</option>
                    <option value="name">Tunnel Name</option>
                    <option value="risk">Risk Level (High to Low)</option>
                    <option value="water">Water Level (High to Low)</option>
                    <option value="update">Last Updated</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Risk Summary Bar */}
        <section className="card mb-4">
          <div className="card-body d-flex justify-content-around text-center">
            {/* High Risk */}
            <div className="risk-summary-item">
              <div className="d-flex flex-column align-items-center">
                <span className="badge bg-danger px-3 py-2 mb-2 fs-6">
                  High Risk
                </span>
                <h3 className="mb-0 fw-bold">
                  {filteredTunnels.filter(t => t.riskLevel === 'High').length}
                </h3>
                <small className="text-muted">Tunnels</small>
              </div>
            </div>
            
            {/* Moderate Risk */}
            <div className="risk-summary-item">
              <div className="d-flex flex-column align-items-center">
                <span className="badge bg-warning text-dark px-3 py-2 mb-2 fs-6">
                  Moderate Risk
                </span>
                <h3 className="mb-0 fw-bold">
                  {filteredTunnels.filter(t => t.riskLevel === 'Moderate').length}
                </h3>
                <small className="text-muted">Tunnels</small>
              </div>
            </div>
            
            {/* Low Risk */}
            <div className="risk-summary-item">
              <div className="d-flex flex-column align-items-center">
                <span className="badge bg-success px-3 py-2 mb-2 fs-6">
                  Low Risk
                </span>
                <h3 className="mb-0 fw-bold">
                  {filteredTunnels.filter(t => t.riskLevel === 'Low').length}
                </h3>
                <small className="text-muted">Tunnels</small>
              </div>
            </div>
            
            {/* Total Tunnels */}
            <div className="risk-summary-item">
              <div className="d-flex flex-column align-items-center">
                <span className="badge bg-primary px-3 py-2 mb-2 fs-6">
                  Total
                </span>
                <h3 className="mb-0 fw-bold">
                  {filteredTunnels.length}
                </h3>
                <small className="text-muted">Tunnels</small>
              </div>
            </div>
          </div>
        </section>

        {/* Tunnels Table */}
        <div className="card shadow-sm">
          <div className="card-body">
            <div className="table-responsive">
              <table className="table table-hover align-middle">
                <thead>
                  <tr>
                    <th className="cursor-pointer" onClick={() => setSortBy('id')}>
                      ID {sortBy === 'id' && <span className="ms-1">↓</span>}
                    </th>
                    <th className="cursor-pointer" onClick={() => setSortBy('name')}>
                      Name {sortBy === 'name' && <span className="ms-1">↓</span>}
                    </th>
                    <th className="cursor-pointer" onClick={() => setSortBy('risk')}>
                      Risk Level {sortBy === 'risk' && <span className="ms-1">↓</span>}
                    </th>
                    <th className="cursor-pointer" onClick={() => setSortBy('water')}>
                      Water Level {sortBy === 'water' && <span className="ms-1">↓</span>}
                    </th>
                    <th>Barrier Status</th>
                    <th className="cursor-pointer" onClick={() => setSortBy('update')}>
                      Last Update {sortBy === 'update' && <span className="ms-1">↓</span>}
                    </th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {currentTunnels.length > 0 ? (
                    currentTunnels.map(tunnel => (
                      <tr key={tunnel.id}>
                        <td><strong>{tunnel.id}</strong></td>
                        <td>{tunnel.name}</td>
                        <td>
                          <span className={`badge ${getRiskBadgeClass(tunnel.riskLevel)}`}>
                            {tunnel.riskLevel}
                          </span>
                        </td>
                        <td>
                          <div className="d-flex align-items-center">
                            <FaWater className="me-2 text-primary" />
                            <div className="progress flex-grow-1" style={{ height: '10px' }}>
                              <div 
                                className={`progress-bar ${tunnel.waterLevel > 60 ? 'bg-danger' : tunnel.waterLevel > 30 ? 'bg-warning' : 'bg-success'}`} 
                                role="progressbar" 
                                style={{ width: `${tunnel.waterLevel}%` }} 
                                aria-valuenow={tunnel.waterLevel} 
                                aria-valuemin={0} 
                                aria-valuemax={100}
                              ></div>
                            </div>
                            <span className="ms-2">{tunnel.waterLevel}%</span>
                          </div>
                        </td>
                        <td>
                          <span className={`badge ${getBarrierBadgeClass(tunnel.barrierStatus)}`}>
                            {tunnel.barrierStatus}
                          </span>
                        </td>
                        <td>{new Date(tunnel.lastUpdate).toLocaleString()}</td>
                        <td>
                          <div className="btn-group">
                            <Link href={`/tunnel/${tunnel.id}`} className="btn btn-sm btn-outline-primary">
                              <FaEye className="me-1" /> View
                            </Link>
                            {hasPermission(['admin', 'ministry', 'traffic']) && (
                              <button 
                                onClick={() => handleEdit(tunnel)} 
                                className="btn btn-sm btn-outline-secondary"
                              >
                                <FaEdit className="me-1" /> Edit
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={7} className="text-center py-3">
                        No tunnels found matching your search criteria.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <nav className="d-flex justify-content-center mt-4">
                <ul className="pagination">
                  <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                    <button 
                      className="page-link" 
                      onClick={() => handlePageChange(currentPage - 1)}
                      aria-label="Previous"
                    >
                      &laquo;
                    </button>
                  </li>
                  
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (
                    <li 
                      key={pageNumber} 
                      className={`page-item ${pageNumber === currentPage ? 'active' : ''}`}
                    >
                      <button 
                        className="page-link" 
                        onClick={() => handlePageChange(pageNumber)}
                      >
                        {pageNumber}
                      </button>
                    </li>
                  ))}
                  
                  <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                    <button 
                      className="page-link" 
                      onClick={() => handlePageChange(currentPage + 1)}
                      aria-label="Next"
                    >
                      &raquo;
                    </button>
                  </li>
                </ul>
              </nav>
            )}
          </div>
        </div>
      </div>
      
      {/* Modal for Add/Edit Tunnel */}
      {showModal && (
        <div className="modal fade show" tabIndex={-1} role="dialog" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">
                  {isEditing ? `Edit Tunnel: ${formData.name}` : 'Add New Tunnel'}
                </h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={() => setShowModal(false)}
                ></button>
              </div>
              <form onSubmit={handleSubmit}>
                <div className="modal-body">
                  <div className="row mb-3">
                    <div className="col-md-6">
                      <label className="form-label">Tunnel Name</label>
                      <input
                        type="text"
                        className="form-control"
                        name="name"
                        value={formData.name || ''}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="col-md-6">
                      <label className="form-label">Location</label>
                      <input
                        type="text"
                        className="form-control"
                        name="location"
                        value={formData.location || ''}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                  
                  <div className="row mb-3">
                    <div className="col-md-4">
                      <label className="form-label">Risk Level</label>
                      <select
                        className="form-select"
                        name="riskLevel"
                        value={formData.riskLevel || 'Low'}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="Low">Low</option>
                        <option value="Moderate">Moderate</option>
                        <option value="High">High</option>
                      </select>
                    </div>
                    <div className="col-md-4">
                      <label className="form-label">Water Level (%)</label>
                      <input
                        type="number"
                        className="form-control"
                        name="waterLevel"
                        value={formData.waterLevel || 0}
                        onChange={handleInputChange}
                        min="0"
                        max="100"
                        required
                      />
                    </div>
                    <div className="col-md-4">
                      <label className="form-label">Barrier Status</label>
                      <select
                        className="form-select"
                        name="barrierStatus"
                        value={formData.barrierStatus || 'Open'}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="Open">Open</option>
                        <option value="Closed">Closed</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="row mb-3">
                    <div className="col-md-6">
                      <label className="form-label">Length (meters)</label>
                      <input
                        type="number"
                        className="form-control"
                        name="length"
                        value={formData.length || 0}
                        onChange={handleInputChange}
                        min="0"
                      />
                    </div>
                    <div className="col-md-6">
                      <label className="form-label">Capacity (vehicles/hour)</label>
                      <input
                        type="number"
                        className="form-control"
                        name="capacity"
                        value={formData.capacity || 0}
                        onChange={handleInputChange}
                        min="0"
                      />
                    </div>
                  </div>
                  
                  <div className="mb-3">
                    <label className="form-label">Description</label>
                    <textarea
                      className="form-control"
                      name="description"
                      value={formData.description || ''}
                      onChange={handleInputChange}
                      rows={3}
                    ></textarea>
                  </div>
                  
                  <div className="mb-3">
                    <label className="form-label">Map Embed HTML <small className="text-muted">(Optional - Paste iframe embed code for tunnel location map)</small></label>
                    <textarea
                      className="form-control"
                      name="mapEmbedHtml"
                      value={formData.mapEmbedHtml || ''}
                      onChange={handleInputChange}
                      rows={4}
                      placeholder='e.g. <iframe src="https://maps.example.com/embed/..." width="100%" height="300" frameborder="0"></iframe>'
                    ></textarea>
                    <small className="form-text text-muted">
                      Enter the complete iframe HTML code for embedding a map showing the tunnel location.
                      You can get this from mapping services like Google Maps, OpenStreetMap, or similar.
                    </small>
                  </div>
                </div>
                
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={() => setShowModal(false)}
                  >
                    <FaTimes className="me-1" />
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                  >
                    <FaSave className="me-1" />
                    {isEditing ? 'Update Tunnel' : 'Save Tunnel'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </PageWrapper>
  );
};

export default SimpleTunnelList;